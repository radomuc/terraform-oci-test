# vim: expandtab shiftwidth=2 smartindent smarttab tabstop=2 softtabstop

# @TODO: use a ssh-certificate
# @TODO: jobs müssgen ggf. zusammengeführt werden, da nicht garnatiert werden kann, das diese jobs auf dem gleichen Agenten ausgeführt werden

variables:
  FSSRV_SSHFILE_PRIV: id_rsa.key
  FSSRV_SSHFILE_PUB: id_rsa.pub
  FSSRV_SSH_USER: radek
  FSSRV_SERVERNAME: cloudservice.my-wan.de
  FSSRV_SSH_PORT: 2222
  PIPELINE_WORKSPACE: $(Pipeline.Workspace)
  SUB_SOURCEDIR: $(Build.SourcesDirectory)
  SUB_ARTIFACTDIR: $(Build.ArtifactStagingDirectory)
  SUB_BINDIR: $(Build.BinariesDirectory)
  SUB_TESTDIR: $(Common.TestResultDirectory)
  SUB_WORKDIR: $(System.DefaultWorkingDirectory)

#resources:
#  repositories:
#  - repository: myjavapipeline
#    type: github
#    endpoint: MyGithubServiceConnection
#    name: radomuc/pipelines-java
#    ref: master

# Trigger Push-Requests
trigger:
  batch: true
  branches:
    include:
    - main
    - feature/*
  paths:
    exclude:
    - README.md
    - azure-pipelines.yml
    - docs/*

# Trigger Pull-Requests
pr:
- main
- feature/*

pool:
  vmImage: ubuntu-latest

#container:
#  # @Ref: https://docs.microsoft.com/de-de/azure/devops/pipelines/process/container-phases?view=azure-devops
#  image: registry:myterraformimage
#  endpoint: private_dockerhub_connection
#  options: --hostname container-test --ip 192.168.0.1

stages:
# test-environment
- stage: run_terraform_testenv
  displayName: "Run terraform for test-environment"
  jobs:
  - job: initialize_vm
    displayName: 'Initialize VM'
    steps:
    # Install sshfs
    - script: |
              sudo apt update
              sudo apt install -y sshfs
      displayName: 'Install sshfs'
    # Download secure-file
    - task: DownloadSecureFile@1
      name: sshKeyFilePriv
      displayName: 'Download ssh-key-private'
      inputs:
        secureFile: 'fssrv-sshfs-id_rsa.key'
    # install ssh-key
    - script: |
              echo "Installing $(sshKeyFilePriv.secureFilePath) to the .ssh"
              sudo chown root:root $(sshKeyFilePriv.secureFilePath)
              sudo chmod a+r $(sshKeyFilePriv.secureFilePath)
              mkdir "$HOME/.ssh"
              ln -s $(sshKeyFilePriv.secureFilePath) "$HOME/.ssh/$(FSSRV_SSHFILE_PRIV)"
      displayName: "Install ssh-key"
    # workdir: /home/vsts/work/1/s
    - script: |
              mkdir $(Build.SourcesDirectory)/tf-cache
              sshfs $(FSSRV_SSH_USER)@$(FSSRV_SERVERNAME):/home/$(FSSRV_SSH_USER)/temp/tf-cache $(Build.SourcesDirectory)/tf-cache -o reconnect -o Port=$(FSSRV_SSH_PORT) -o ServerAliveInterval=15 -o IdentityFile="$HOME/.ssh/$(FSSRV_SSHFILE_PRIV)" -o StrictHostKeyChecking=accept-new
      displayName: 'Mount Shared-Directory'
    - script: |
              echo "install programs ..."
              docker images
      displayName: "Install prog ..."
    - script: echo "create or download docker-image"

  - job: 'prepare_environment'
    displayName: "Prepare environment"
    dependsOn: initialize_vm
    steps:
    - script: echo "nothing"

  - job: 'start_container'
    displayName: 'Start container'
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    dependsOn: prepare_environment
    steps:
    - script: |
              echo "start container"

  - job: 'cleanup'
    displayName: "Cleanup"
    dependsOn:
    - prepare_environment
    - start_container
    condition: succeeded('prepare_environment')
    workspace:
      clean: all
    steps:
    - script: |
              echo "unbind shared-directory"
              sync
              umount $(Build.SourcesDirectory)/tf-cache
              echo "destroy container"

#   - job: 'prepare_environment'
#       displayName: "Prepare environment"
#       dependsOn: initialize_vm
#       steps:
#        - checkout: self
#            path: tf-repo
#
#   - job: 'start_container'
#       displayName: "Start container"
#       timeoutInMinutes: 120
#       cancelTimeoutInMinutes: 5
#       depndsOn: prepare_environment
#       steps:
#       - script: echo "start container"
#
#   - job: 'cleanup'
#       displayName: "Cleanup"
#       dependsOn:
#       - prepare_environment
#       - start_container
#       condition: succeeded('prepare_environment')
#       workspace:
#         clean: outputs | resources
#       steps:
#       - script: |
#                 echo "unbind shared-directory"
#                 echo "destroy container"

# prod-environment
# stage: "run_terraform_prodenv"
# displayName: "Run terraform for prod-environment"
# dependsOn: run_terraform_testenv
# condition: succeeded()
#
# jobs:
#
